{"version":3,"sources":["api.js","UserForm.js","UsersList.js","App.js","serviceWorker.js","index.js"],"names":["DEFAULT_OPTIONS","headers","request","path","options","a","fetch","res","json","data","ok","message","status","console","error","getUsers","method","createUser","user","body","JSON","stringify","UserForm","useState","setLoading","setError","firstName","setFirstName","lastName","setLastName","age","setAge","title","variant","direction","isRequired","label","type","onChange","e","target","value","onClick","parseInt","log","showCloseButton","onClickClose","UsersList","users","setUsers","loading","fetchUsers","useEffect","Error","isLoading","map","User","App","padding","Column","spread","spreadOffset","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"mMAAMA,EAAkB,CACtBC,QAAS,CAAE,eAAgB,qB,SAGdC,E,gFAAf,WAAuBC,EAAMC,GAA7B,iBAAAC,EAAA,+EAEsBC,MAAMH,EAAD,YAAC,eAAWH,GAAoBI,IAF3D,cAEUG,EAFV,gBAGuBA,EAAIC,OAH3B,UAGUC,EAHV,OAKSF,EAAIG,GALb,sBAMoB,CACZC,QAAUF,GAAQA,EAAKE,SAAY,UACnCC,OAAQL,EAAIK,QARpB,iCAaWH,GAbX,wCAeII,QAAQC,MAAR,MAfJ,gE,sBAoBO,SAAeC,IAAtB,+B,4CAAO,sBAAAV,EAAA,+EACEH,EAAQ,aAAc,CAAEc,OAAQ,SADlC,4C,sBAQA,SAAeC,EAAtB,kC,4CAAO,WAA0BC,GAA1B,SAAAb,EAAA,+EACEH,EAAQ,aAAc,CAC3Bc,OAAQ,OACRG,KAAMC,KAAKC,UAAUH,MAHlB,4C,sBC5BQ,SAASI,IAAY,IAAD,EACHC,oBAAS,GADN,mBACjBC,GADiB,aAEPD,mBAAS,MAFF,mBAE1BT,EAF0B,KAEnBW,EAFmB,OAGCF,mBAAS,IAHV,mBAG1BG,EAH0B,KAGfC,EAHe,OAIDJ,mBAAS,IAJR,mBAI1BK,EAJ0B,KAIhBC,EAJgB,OAKXN,mBAAS,IALE,mBAK1BO,EAL0B,KAKrBC,EALqB,KAOjC,OACE,kBAAC,IAAD,CAAMC,MAAM,kBAAkBC,QAAQ,YACpC,kBAAC,IAAD,CAAOC,UAAU,YACf,kBAAC,IAAD,CACEC,YAAU,EACVC,MAAM,aACNC,KAAK,OACLC,SAAU,SAACC,GACTZ,EAAaY,EAAEC,OAAOC,UAG1B,kBAAC,IAAD,CACEN,YAAU,EACVC,MAAM,YACNC,KAAK,OACLC,SAAU,SAACC,GACTV,EAAYU,EAAEC,OAAOC,UAGzB,kBAAC,IAAD,CACEN,YAAU,EACVC,MAAM,MACNC,KAAK,SACLC,SAAU,SAACC,GACTR,EAAOQ,EAAEC,OAAOC,UAGpB,kBAAC,IAAD,CACEC,QAAO,sBAAE,4BAAArC,EAAA,6DACPmB,GAAW,GADJ,kBAGaP,EAAW,CAC3BS,YACAE,WACAE,IAAKa,SAASb,EAAK,MANhB,OAGCvB,EAHD,OAQLM,QAAQ+B,IAAIrC,GARP,gDAULkB,EAAS,EAAD,IAVH,yBAYLD,GAAW,GAZN,6EADX,YAmBGV,GACD,kBAAC,IAAD,CACEkB,MAAM,yBACNa,iBAAe,EACfR,KAAK,SACLS,aAAc,WACZrB,EAAS,QALb,kEAQkE,IAC/DX,EAAMH,WC9DJ,SAASoC,IAAa,IAAD,EACRxB,mBAAS,IADD,mBAC3ByB,EAD2B,KACpBC,EADoB,OAER1B,mBAAS,MAFD,mBAE3BT,EAF2B,KAEpBW,EAFoB,OAGJF,oBAAS,GAHL,mBAG3B2B,EAH2B,KAGlB1B,EAHkB,cAKnB2B,IALmB,2EAKlC,4BAAA9C,EAAA,6DACEmB,GAAW,GADb,kBAGwBT,IAHxB,OAGUiC,EAHV,OAIIC,EAASD,GACTvB,EAAS,MALb,gDAOIA,EAAS,EAAD,IAPZ,yBASID,GAAW,GATf,6EALkC,sBAsBlC,OAJA4B,qBAAU,WACRD,MACC,IAECrC,EAEK,kBAACuC,EAAD,CAAOvC,MAAOA,IAIrB,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEwC,UAAWJ,EACXR,QAAS,WACPS,MAHJ,WAQCH,EAAMO,KAAI,SAACrC,GAAD,OACT,kBAACsC,EAAD,CAAMtC,KAAMA,QAMpB,SAASsC,EAAT,GAAyB,IAATtC,EAAQ,EAARA,KACd,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOgB,UAAU,YACf,kBAAC,IAAD,KAAOhB,EAAKQ,WACZ,kBAAC,IAAD,KAAOR,EAAKU,UACZ,kBAAC,IAAD,KAAOV,EAAKY,OAMpB,SAASuB,EAAT,GAA2B,IAAVvC,EAAS,EAATA,MACf,OACE,kBAAC,IAAD,CAAMkB,MAAM,uBAAuBC,QAAQ,YAA3C,kCACkCnB,EAAMF,OADxC,KCzDW,SAAS6C,IACtB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKC,QAAQ,QACX,kBAAC,IAAD,KACE,kBAAC,IAAQC,OAAT,CAAgBC,OAAQ,EAAGC,aAAa,QACtC,kBAACvC,EAAD,OAEF,kBAAC,IAAQqC,OAAT,CAAgBC,OAAQ,EAAGC,aAAa,SACtC,kBAACd,EAAD,UCHQe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACZ,EAAD,OAEFa,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAhE,GACLD,QAAQC,MAAMA,EAAMH,a","file":"static/js/main.f29ebee7.chunk.js","sourcesContent":["const DEFAULT_OPTIONS = {\n  headers: { \"Content-Type\": \"application/json\" },\n}\n\nasync function request(path, options) {\n  try {\n    const res = await fetch(path, { ...DEFAULT_OPTIONS, ...options })\n    const data = await res.json()\n\n    if (!res.ok) {\n      const error = {\n        message: (data && data.message) || \"unknown\",\n        status: res.status,\n      }\n      throw error\n    }\n\n    return data\n  } catch (e) {\n    console.error(e)\n    throw e\n  }\n}\n\nexport async function getUsers() {\n  return request(\"/api/users\", { method: \"GET\" })\n}\n\nexport async function getUser(id) {\n  return request(`/api/users/${id}`, { method: \"GET\" })\n}\n\nexport async function createUser(user) {\n  return request(`/api/users`, {\n    method: \"POST\",\n    body: JSON.stringify(user),\n  })\n}\n","import React, { useState } from \"react\"\nimport { Card, InputField, Stack, Button, Alert } from \"bumbag\"\n\nimport { createUser } from \"./api\"\nexport default function UserForm() {\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState(null)\n  const [firstName, setFirstName] = useState(\"\")\n  const [lastName, setLastName] = useState(\"\")\n  const [age, setAge] = useState(\"\")\n\n  return (\n    <Card title=\"Create new user\" variant=\"bordered\">\n      <Stack direction=\"vertical\">\n        <InputField\n          isRequired\n          label=\"First Name\"\n          type=\"text\"\n          onChange={(e) => {\n            setFirstName(e.target.value)\n          }}\n        />\n        <InputField\n          isRequired\n          label=\"Last Name\"\n          type=\"text\"\n          onChange={(e) => {\n            setLastName(e.target.value)\n          }}\n        />\n        <InputField\n          isRequired\n          label=\"Age\"\n          type=\"number\"\n          onChange={(e) => {\n            setAge(e.target.value)\n          }}\n        />\n        <Button\n          onClick={async () => {\n            setLoading(true)\n            try {\n              const res = await createUser({\n                firstName,\n                lastName,\n                age: parseInt(age, 10),\n              })\n              console.log(res)\n            } catch (e) {\n              setError(e)\n            } finally {\n              setLoading(false)\n            }\n          }}\n        >\n          Create\n        </Button>\n        {!!error && (\n          <Alert\n            title=\"Could not create user!\"\n            showCloseButton\n            type=\"danger\"\n            onClickClose={() => {\n              setError(null)\n            }}\n          >\n            Something went wrong and we couldn't create your user. Message:{\" \"}\n            {error.message}\n          </Alert>\n        )}\n      </Stack>\n    </Card>\n  )\n}\n","import React, { useEffect, useState } from \"react\"\nimport { Text, Stack, Card, Spinner, Box, Button } from \"bumbag\"\n\nimport { getUsers } from \"./api\"\n\nexport default function UsersList() {\n  const [users, setUsers] = useState([])\n  const [error, setError] = useState(null)\n  const [loading, setLoading] = useState(false)\n\n  async function fetchUsers() {\n    setLoading(true)\n    try {\n      const users = await getUsers()\n      setUsers(users)\n      setError(null)\n    } catch (e) {\n      setError(e)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  useEffect(() => {\n    fetchUsers()\n  }, [])\n\n  if (error) {\n    // Return early if we have an error\n    return <Error error={error} />\n  }\n\n  return (\n    <Stack>\n      <Button\n        isLoading={loading}\n        onClick={() => {\n          fetchUsers()\n        }}\n      >\n        Refresh\n      </Button>\n      {users.map((user) => (\n        <User user={user} />\n      ))}\n    </Stack>\n  )\n}\n\nfunction User({ user }) {\n  return (\n    <Card>\n      <Stack direction=\"vertical\">\n        <Text>{user.firstName}</Text>\n        <Text>{user.lastName}</Text>\n        <Text>{user.age}</Text>\n      </Stack>\n    </Card>\n  )\n}\n\nfunction Error({ error }) {\n  return (\n    <Card title=\"Couldn't fetch users\" variant=\"bordered\">\n      Something went wrong! (status: {error.status})\n    </Card>\n  )\n}\n\nfunction Loading() {\n  return (\n    <Box justifyContent=\"center\" alignItems=\"center\">\n      <Spinner size=\"large\" />\n    </Box>\n  )\n}\n","import React from \"react\";\nimport { Provider as BumbagProvider, Columns, Box } from \"bumbag\";\n\nimport UserForm from \"./UserForm\";\nimport UsersList from \"./UsersList\";\n\nexport default function App() {\n  return (\n    <BumbagProvider>\n      <Box padding=\"32px\">\n        <Columns>\n          <Columns.Column spread={4} spreadOffset=\"left\">\n            <UserForm />\n          </Columns.Column>\n          <Columns.Column spread={4} spreadOffset=\"right\">\n            <UsersList />\n          </Columns.Column>\n        </Columns>\n      </Box>\n    </BumbagProvider>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}